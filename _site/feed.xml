<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hans-Joachim Krauch&#39;s blog</title>
    <description>Projects, thoughts and random stuff
</description>
    <link>http://achimk-k.github.io/</link>
    <atom:link href="http://achimk-k.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 11 Jun 2016 13:44:28 +0200</pubDate>
    <lastBuildDate>Sat, 11 Jun 2016 13:44:28 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>XPS 13 Setup</title>
        <description>&lt;h2 id=&quot;install-1604-64-bit&quot;&gt;Install 16.04 (64-bit)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Download desktop iso and create bootable usb stick, using pre-installed program &lt;strong&gt;Startup Disk Creator&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Reboot into BIOS and disable Secure boot&lt;/li&gt;
  &lt;li&gt;Install Ubuntu from stick&lt;/li&gt;
  &lt;li&gt;Enable Secure Boot again&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade-to-latest-kernel-4413s&quot;&gt;Upgrade to latest kernel (4.4.13)s&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt dist-upgrade
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4.13-xenial/linux-headers-4.4.13-040413_4.4.13-040413.201606072354_all.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4.13-xenial/linux-headers-4.4.13-040413-generic_4.4.13-040413.201606072354_amd64.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4.13-xenial/linux-image-4.4.13-040413-generic_4.4.13-040413.201606072354_amd64.deb
sudo dpkg -i linux-headers-4.4&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.deb linux-image-4.4&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;install-libinput&quot;&gt;Install libinput&lt;/h1&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install xserver-xorg-input-libinput
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Edit the following file&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /usr/share/X11/xorg.conf.d/90-libinput.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;and set the following options in the appropriate section&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &lt;span class=&quot;s2&quot;&gt;&quot;InputClass&quot;&lt;/span&gt;
    Identifier &lt;span class=&quot;s2&quot;&gt;&quot;libinput touchpad catchall&quot;&lt;/span&gt;
    MatchIsTouchpad &lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt;
    MatchDevicePath &lt;span class=&quot;s2&quot;&gt;&quot;/dev/input/event*&quot;&lt;/span&gt;
    Driver &lt;span class=&quot;s2&quot;&gt;&quot;libinput&quot;&lt;/span&gt;
    Option &lt;span class=&quot;s2&quot;&gt;&quot;Tapping&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;True&quot;&lt;/span&gt;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Logout and login again&lt;/p&gt;

&lt;h1 id=&quot;touch-gestures&quot;&gt;Touch gestures&lt;/h1&gt;
&lt;p&gt;Short summary from &lt;a href=&quot;https://github.com/bulletmark/libinput-gestures&quot;&gt;this github repo&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install libinput-tools xdotool
sudo gpasswd -a &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; input  &lt;span class=&quot;c&quot;&gt;# Then log out and back in to assign this group&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After login, check if you can see your gestures appearing here:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libinput-debug-events
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Clone repo and install:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone http://github.com/bulletmark/libinput-gestures
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libinput-gestures
make install                &lt;span class=&quot;c&quot;&gt;# Do this as your normal user, NOT as sudo/root.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Configure gestures in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/libinput-gestures.conf&lt;/code&gt;.
Could then look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gesture: swipe up 3	xdotool key ctrl+super+Up
gesture: swipe down 3	xdotool key ctrl+super+Down
gesture: swipe right 3	xdotool key alt+Right
gesture: swipe left 3	xdotool key alt+Left

gesture: swipe up 4     xdotool key shift+super+w
gesture: swipe down 4   xdotool key super+s
gesture: swipe left 4   xdotool key ctrl+alt+Left
gesture: swipe right 4  xdotool key ctrl+alt+Right
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Test it by running&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./libinput-gestures &lt;span class=&quot;c&quot;&gt;# will autostart on startup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;other-issues&quot;&gt;Other issues&lt;/h1&gt;

&lt;h2 id=&quot;slow-shutdown-due-to-cups-browsed-service&quot;&gt;Slow shutdown due to cups-browsed service&lt;/h2&gt;
&lt;p&gt;see &lt;a href=&quot;http://askubuntu.com/questions/760952/slow-shutdown-on-ubuntu-16-04-lts-stopping-thermal-daemon-running-fit-make-remo&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl disable cups-browsed.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 01:00:42 +0200</pubDate>
        <link>http://achimk-k.github.io/projects/2016/06/10/XPS13-setup.html</link>
        <guid isPermaLink="true">http://achimk-k.github.io/projects/2016/06/10/XPS13-setup.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>ROS and ROS-MoveIt!</title>
        <description>&lt;p&gt;In our second Robotics &amp;amp; Vision project, we were working on a pick &amp;amp; place task.
The goal was to estimate the pose of a known object, grab it with a robotic
arm and place it into a bin. Our workcell consisted of a 7-dof Mitsubishi PA-10
robotic arm and a RGB-D camera for pose estimation. For implementing pose estimation
and path planning, we were encouraged to use OpenCV, ROS and the university’s
own robotics library &lt;a href=&quot;http://www.robwork.dk/jrobwork/&quot;&gt;Robwork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, since we made bad experience with Robwork in the previous project, we
decided to go with another framework, namely &lt;a href=&quot;http://moveit.ros.org/&quot;&gt;ROS-MoveIt!&lt;/a&gt;. MoveIt! is a
state of the art and easy to use robotic software and we never regretted choosing
it. However, there were two major drawbacks compared to using Robwork:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The PA-10 was not supported by MoveIt!&lt;/li&gt;
  &lt;li&gt;There was no interface to the PA-10 controller which translates the planned trajectory to a robot movement&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily we found a collada file of a PA-10 on the internet, which allowed us to
create a URDF (Universal Robot Description File) for the PA-10. This file
contains all the joint and link dimensions and is used by MoveIt! to calculate all
necessary transformations for forward and inverse kinematics → Planning. Once we had the
URDF ready, we could import it into the ROS visualization tool RVIZ and do some
simulated planning and execution in our virtual workcell. We used the simulator
of ros-industrial for the simulation.&lt;/p&gt;

&lt;p&gt;The next step was to integrate the PA-10 controller into MoveIt!, so we could
control the robotic arm via the RVIZ MoveIt! plugin. It took some time reading
the MoveIt and PA-10 controller documentation (which were quite bad at that time)
but I finally got a python script running which published the PA-10 joint states
as a ROS-topic so they could be processed by MoveIt!. It was a great feeling
controlling the PA-10 manually and simultaneously seeing the robot move in RVIZ
accordingly. A second “translator script” was used to translate the MoveIt! trajectories into
ROS sevice calls for the PA-10 controller.&lt;/p&gt;

&lt;p&gt;For this project I had to dig very deeply into ROS and ROS-MoveIt! and thereby got to know
it very well. The source code of our PA-10 adaptions including &lt;em&gt;PA10_description&lt;/em&gt;
and &lt;em&gt;PA10_moveit_config&lt;/em&gt; can be found at this &lt;a href=&quot;https://bitbucket.org/akrauch/rovi2_group8&quot;&gt;Bitbucket repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Sep 2015 12:13:42 +0200</pubDate>
        <link>http://achimk-k.github.io/projects/2015/09/01/ros-and-ros-moveit.html</link>
        <guid isPermaLink="true">http://achimk-k.github.io/projects/2015/09/01/ros-and-ros-moveit.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>Doorman</title>
        <description>&lt;p&gt;In the summer semester 2014, me and 3 other students were looking for a new place to live.
We eventually found a nice and modern flat, which was sublet to us by a PhD student.
Unfortunately, the landlord of the place was not happy about four students moving in and
refused to give us two additional keys, which meant that we had only 2 keys for 4 students :(
Making copies of our keys was not an option, since you need an special agreement from the
landlord to be able to make copies.&lt;/p&gt;

&lt;p&gt;For that reason, I decided to make a little remote controlled robot, which could open the
door from inside. The robot brain consisted of a raspberry pi, which controlled a stepper
motor to open the apartment door and a reed relay to open the house door (electrical buzzer).
The stepper motor was driven through two ULN2003 Darlington transistor arrays which were
connected to the GPIO pins of the raspberry pi. The shaft of the stepper motor was
connected to the door lock via a rope and a stick (see video below).&lt;/p&gt;

&lt;p&gt;I found a simple python script on the internet which could be tuned to drive the stepper motor
in unipolar mode. The script, together with another script to activate the reed relay for the
house door, could be called via SSH from my laptop or any other device whose public key was authorized.
Pubic key authentication was the main authorization method enabling me to add or remove
devices which was quite handy when I hosted some of my friends from Germany.&lt;/p&gt;

&lt;p&gt;The basic opening process worked like this: At first, a new user installs the Android app
(received .apk from me) on his phone, generates a public key with the app and sends
the public key to me (by email or messenger). Once I had added the public key to the
&lt;em&gt;authrized_keys&lt;/em&gt; file on the pi, the user was able to open house and apartment door with the
app once the phone was connected to the same wifi as the raspberry pi (I set up a static ip
address for the raspberry pi). I also set up dyndns to be able to open even without being in the
same network as the raspberry. However, I have never needed this feature since my flatmates
never forgot their keys.&lt;/p&gt;

&lt;p&gt;The video of the opening process can be seen below. Yes, it is a badly recorded video, but I think
it explains most of it. It was super fun tinkering around with this project that I later called
&lt;em&gt;Doorman&lt;/em&gt;. Opening the door with the android app always made me smile.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; style=&quot;margin: 0 auto; display: block;&quot; src=&quot;https://www.youtube.com/embed/-QZS3CHGylk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Mon, 31 Aug 2015 18:13:42 +0200</pubDate>
        <link>http://achimk-k.github.io/projects/2015/08/31/doorman.html</link>
        <guid isPermaLink="true">http://achimk-k.github.io/projects/2015/08/31/doorman.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
  </channel>
</rss>
